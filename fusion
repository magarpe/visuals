import turtle, random, math

colors = ["red", "green", "blue", "orange", "purple", "pink", "yellow"]
screenSize = turtle.screensize()
screen = turtle.Screen()

robotSize = 25
numRobots = 1
tsize = 21
autoHeading = False
turtleSpeed = 8

lines = []


class Robot(turtle.Turtle):
    shapes = []

    def __init__(self, x, y, col):
        global robotSize, tsize
        """Turtle Constructor"""
        turtle.Turtle.__init__(self, visible=False)
        self.shape(self.createTurtleShape(col))
        self.speed(turtleSpeed)
        self.color(col)
        self.turtlesize(robotSize / tsize)
        self.pensize(robotSize)
        self.penup()
        self.goto(x, y)
        self.pendown()
        self.pencolor("grey")
        self.right(random.randint(0, 360))
        self.showturtle()

    def createTurtleShape(self, color):
        global screen
        if not str(color) in self.shapes:
            cir = (
            (10, 0), (9.51, 3.09), (8.09, 5.88), (5.88, 8.09), (3.09, 9.51), (0, 10), (-3.09, 9.51), (-5.88, 8.09),
            (-8.09, 5.88), (-9.51, 3.09), (-10, 0), (-9.51, -3.09), (-8.09, -5.88), (-5.88, -8.09), (-3.09, -9.51),
            (-0.0, -10.0), (3.09, -9.51), (5.88, -8.09), (8.09, -5.88), (9.51, -3.09))
            line = ((0, 0), (0, 10))
            s = turtle.Shape("compound")
            s.addcomponent(cir, color, "black")
            s.addcomponent(line, "black", "black")
            screen.register_shape(str(color), s)
            self.shapes.append(str(color))
        return str(color)

    def move(self, target):
        global lines
        lines.append((self.pos(), target))
        degrees = math.degrees(math.atan2(target[1] - self.pos()[1], target[0] - self.pos()[0]))
        heading = self.heading()
        if autoHeading:
            self.setheading(degrees)
        else:
            if degrees < 0:
                # print(degrees)
                degrees = 360 + degrees
            if ((heading - degrees + 360) % 360) > 180:
                if heading > 180 and degrees < 180:
                    self.left(360 - (heading - degrees))
                else:
                    self.left(degrees - heading)
            else:
                if heading < 180 and (degrees) > 180:
                    self.right(360 - (degrees - heading))
                else:
                    self.right(heading - degrees)

        # print("Heading:",heading,", Target:",degrees)
        self.forward(self.distance(target))


boulder = turtle.Turtle(visible=False)
boulder.speed(0)
boulder.goto(100,0)
boulder.goto(100,100)
boulder.goto(0,100)
boulder.goto(0,0)

robot1 = Robot(-50, -50, "blue")
robot1.move((-50, 150))
robot1.move((150, 150))
robot1.move((150, -50))
robot1.move((-50, -50))


turtle.done()
